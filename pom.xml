<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		 xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<!-- The Spring Boot parent POM provides sensible default configurations for our project. -->
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>3.3.1</version>
		<relativePath/>
	</parent>

	<groupId>com.example</groupId>
	<artifactId>docprocessor</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<name>docprocessor</name>
	<description>Final ocr project in spring boot</description>

	<!-- Central place to manage versions for our dependencies. -->
	<properties>
		<java.version>17</java.version>
		<kotlin.version>2.2.0</kotlin.version>
		<pdfbox.version>3.0.2</pdfbox.version>
		<jjwt.version>0.11.5</jjwt.version>
		<springdoc.version>2.5.0</springdoc.version>
		<spring-cloud.version>2023.0.2</spring-cloud.version>
	</properties>

	<!-- Manages the versions for a group of related dependencies (in this case, Spring Cloud). -->
	<!-- This ensures all our Spring Cloud modules (like OpenFeign) are compatible with each other. -->
	<dependencyManagement>
		<dependencies>
			<dependency>
				<groupId>org.springframework.cloud</groupId>
				<artifactId>spring-cloud-dependencies</artifactId>
				<version>${spring-cloud.version}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
		</dependencies>
	</dependencyManagement>

	<dependencies>
		<!-- ===================================================================== -->
		<!-- CORE SPRING BOOT STARTERS                                             -->
		<!-- ===================================================================== -->
		<!-- Core dependency for building web applications, includes Tomcat and Spring MVC. -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>
		<!-- Handles all security aspects: authentication, authorization, and endpoint protection. -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-security</artifactId>
		</dependency>
		<!-- Provides data access capabilities with JPA (Java Persistence API) and Hibernate. -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-jpa</artifactId>
		</dependency>
		<!-- Used for validating incoming DTOs with annotations like @NotBlank. -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-validation</artifactId>
		</dependency>
		<!-- Provides the modern, non-blocking WebClient for making HTTP requests. -->
		<!-- Though we use Feign, this is often included as a foundational web dependency. -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-webflux</artifactId>
		</dependency>

		<!-- ===================================================================== -->
		<!-- KOTLIN SUPPORT                                                        -->
		<!-- ===================================================================== -->
		<!-- Allows Jackson (JSON library) to correctly handle Kotlin data classes. -->
		<dependency>
			<groupId>com.fasterxml.jackson.module</groupId>
			<artifactId>jackson-module-kotlin</artifactId>
		</dependency>
		<!-- Provides Kotlin's reflection capabilities. -->
		<dependency>
			<groupId>org.jetbrains.kotlin</groupId>
			<artifactId>kotlin-reflect</artifactId>
		</dependency>
		<!-- The standard library for Kotlin. -->
		<dependency>
			<groupId>org.jetbrains.kotlin</groupId>
			<artifactId>kotlin-stdlib</artifactId>
		</dependency>

		<!-- ===================================================================== -->
		<!-- API DOCUMENTATION & MICROSERVICE COMMUNICATION                        -->
		<!-- ===================================================================== -->
		<!-- A key library that automatically generates OpenAPI 3 documentation and a Swagger UI. -->
		<!-- This makes our API interactive and easy for frontend teams or clients to use. -->
		<dependency>
			<groupId>org.springdoc</groupId>
			<artifactId>springdoc-openapi-starter-webmvc-ui</artifactId>
			<version>${springdoc.version}</version>
		</dependency>
		<!-- Enables declarative REST clients (Feign). It simplifies communication -->
		<!-- with our Python microservice by letting us define a simple client interface. -->
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-openfeign</artifactId>
		</dependency>

		<!-- ===================================================================== -->
		<!-- DATABASE & JWT                                                        -->
		<!-- ===================================================================== -->
		<!-- The official JDBC driver for connecting to a MySQL database. -->
		<dependency>
			<groupId>com.mysql</groupId>
			<artifactId>mysql-connector-j</artifactId>
			<scope>runtime</scope>
		</dependency>
		<!-- A popular library for creating and validating JSON Web Tokens (JWTs). -->
		<dependency>
			<groupId>io.jsonwebtoken</groupId>
			<artifactId>jjwt-api</artifactId>
			<version>${jjwt.version}</version>
		</dependency>
		<dependency>
			<groupId>io.jsonwebtoken</groupId>
			<artifactId>jjwt-impl</artifactId>
			<version>${jjwt.version}</version>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>io.jsonwebtoken</groupId>
			<artifactId>jjwt-jackson</artifactId>
			<version>${jjwt.version}</version>
			<scope>runtime</scope>
		</dependency>

		<!-- ===================================================================== -->
		<!-- UTILITIES                                                             -->
		<!-- ===================================================================== -->
		<!-- A powerful library for working with PDF documents. We use it to convert -->
		<!-- uploaded PDFs into images for the OCR service. -->
		<dependency>
			<groupId>org.apache.pdfbox</groupId>
			<artifactId>pdfbox</artifactId>
			<version>${pdfbox.version}</version>
		</dependency>
		<dependency>
			<groupId>org.apache.pdfbox</groupId>
			<artifactId>pdfbox-tools</artifactId>
			<version>${pdfbox.version}</version>
		</dependency>

		<!-- ===================================================================== -->
		<!-- TESTING                                                               -->
		<!-- ===================================================================== -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.security</groupId>
			<artifactId>spring-security-test</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.jetbrains.kotlin</groupId>
			<artifactId>kotlin-test-junit5</artifactId>
			<scope>test</scope>
		</dependency>
	</dependencies>

	<build>
		<sourceDirectory>${project.basedir}/src/main/kotlin</sourceDirectory>
		<testSourceDirectory>${project.basedir}/src/test/kotlin</testSourceDirectory>
		<plugins>
			<!-- Standard plugin for packaging the application into an executable JAR. -->
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
			</plugin>

			<!-- Configures the Kotlin compiler for Maven. -->
			<plugin>
				<groupId>org.jetbrains.kotlin</groupId>
				<artifactId>kotlin-maven-plugin</artifactId>
				<version>${kotlin.version}</version>
				<configuration>
					<args>
						<arg>-Xjsr305=strict</arg>
					</args>
					<compilerPlugins>
						<!-- These plugins automatically open Kotlin classes so that Spring (proxying) -->
						<!-- and JPA (entity enhancement) can work with them correctly. -->
						<plugin>spring</plugin>
						<plugin>jpa</plugin>
					</compilerPlugins>
				</configuration>
				<dependencies>
					<dependency>
						<groupId>org.jetbrains.kotlin</groupId>
						<artifactId>kotlin-maven-allopen</artifactId>
						<version>${kotlin.version}</version>
					</dependency>
					<dependency>
						<groupId>org.jetbrains.kotlin</groupId>
						<artifactId>kotlin-maven-noarg</artifactId>
						<version>${kotlin.version}</version>
					</dependency>
				</dependencies>
			</plugin>
		</plugins>
	</build>
</project>